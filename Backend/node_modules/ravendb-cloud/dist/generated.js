"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The base class for all API clients.
 * Injects Authorization header into the requests, see #transformOptions.
 */
class AuthorizedApiBase {
    constructor(config) {
        this.config = config;
    }
    transformOptions(options) {
        options.headers = Object.assign(Object.assign({}, options.headers), { "X-Api-Key": this.config.apiKey });
        return Promise.resolve(options);
    }
    ;
    transformResult(_url, response, processor) {
        return __awaiter(this, void 0, void 0, function* () {
            if (response.status === 404) {
                return null;
            }
            if (response.status >= 400) {
                const text = yield response.text();
                const message = `HTTP ${response.status} ${response.statusText}: ${text}`;
                throw new ApiException(message, response.status, text, response.headers, null);
            }
            return processor(response);
        });
    }
}
exports.AuthorizedApiBase = AuthorizedApiBase;
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.0.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
class AccountClient extends AuthorizedApiBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets account info
     * @return Account info
     */
    getInfo() {
        let url_ = this.baseUrl + "/api/v1/account/info";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetInfo(_response));
        });
    }
    processGetInfo(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = AccountInfoResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                return throwException("Bad Request", status, _responseText, _headers);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                return throwException("Unauthorized", status, _responseText, _headers);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                return throwException("Not Found", status, _responseText, _headers);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
exports.AccountClient = AccountClient;
class MetadataClient extends AuthorizedApiBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets regions available for given cloud provider
     * @param cloudProvider Cloud provider
     * @return List of regions available for given cloud provider
     */
    getRegions(cloudProvider) {
        let url_ = this.baseUrl + "/api/v1/metadata/regions/{cloudProvider}";
        if (cloudProvider === undefined || cloudProvider === null)
            throw new Error("The parameter 'cloudProvider' must be defined.");
        url_ = url_.replace("{cloudProvider}", encodeURIComponent("" + cloudProvider));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetRegions(_response));
        });
    }
    processGetRegions(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = RegionsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets instance types available for given cloud provider and region
     * @param cloudProvider Cloud provider
     * @param region Region
     * @return List of instance types available for given cloud provider and region
     */
    getInstanceTypes(cloudProvider, region) {
        let url_ = this.baseUrl + "/api/v1/metadata/instance-types/{cloudProvider}/{region}";
        if (cloudProvider === undefined || cloudProvider === null)
            throw new Error("The parameter 'cloudProvider' must be defined.");
        url_ = url_.replace("{cloudProvider}", encodeURIComponent("" + cloudProvider));
        if (region === undefined || region === null)
            throw new Error("The parameter 'region' must be defined.");
        url_ = url_.replace("{region}", encodeURIComponent("" + region));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetInstanceTypes(_response));
        });
    }
    processGetInstanceTypes(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = InstanceTypesResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets product release channels
     * @return List of product release channels
     */
    getReleaseChannels() {
        let url_ = this.baseUrl + "/api/v1/metadata/release-channels";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetReleaseChannels(_response));
        });
    }
    processGetReleaseChannels(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ReleaseChannelsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
exports.MetadataClient = MetadataClient;
class ProductsClient extends AuthorizedApiBase {
    constructor(configuration, baseUrl, http) {
        super(configuration);
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Gets product list
     * @return Products list
     */
    list() {
        let url_ = this.baseUrl + "/api/v1/products/list";
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processList(_response));
        });
    }
    processList(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProductListResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Creates product
     * @param body (optional)
     * @return Created Product Info
     */
    create(body) {
        let url_ = this.baseUrl + "/api/v1/products/create";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processCreate(_response));
        });
    }
    processCreate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 202) {
            return response.text().then((_responseText) => {
                let result202 = null;
                let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result202 = ProductCreatedResponse.fromJS(resultData202);
                return result202;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets product details
     * @return Product details
     */
    getDetails(id) {
        let url_ = this.baseUrl + "/api/v1/products/details/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetDetails(_response));
        });
    }
    processGetDetails(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200 = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = ProductDetailsResponse.fromJS(resultData200);
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Gets product client certificate
     * @return Product client certificate
     */
    getCertificate(id) {
        let url_ = this.baseUrl + "/api/v1/products/security/certificate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processGetCertificate(_response));
        });
    }
    processGetCertificate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Changes product storage
     * @param body (optional)
     * @return Success
     */
    changeStorage(body) {
        let url_ = this.baseUrl + "/api/v1/products/storage";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processChangeStorage(_response));
        });
    }
    processChangeStorage(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 202) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Changes product instance type
     * @param body (optional)
     * @return Success
     */
    changeInstanceType(body) {
        let url_ = this.baseUrl + "/api/v1/products/instance-type";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processChangeInstanceType(_response));
        });
    }
    processChangeInstanceType(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 202) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Restart node
     * @param body (optional)
     * @return Success
     */
    restartNode(body) {
        let url_ = this.baseUrl + "/api/v1/products/restart-node";
        url_ = url_.replace(/[?&]$/, "");
        const content_ = JSON.stringify(body);
        let options_ = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processRestartNode(_response));
        });
    }
    processRestartNode(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 202) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
    /**
     * Terminate product
     * @return Success
     */
    terminate(id) {
        let url_ = this.baseUrl + "/api/v1/products/terminate/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        let options_ = {
            method: "POST",
            headers: {}
        };
        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response) => {
            return this.transformResult(url_, _response, (_response) => this.processTerminate(_response));
        });
    }
    processTerminate(response) {
        const status = response.status;
        let _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v, k) => _headers[k] = v);
        }
        ;
        if (status === 202) {
            return response.text().then((_responseText) => {
                return;
            });
        }
        else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400 = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        }
        else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401 = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        }
        else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404 = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        }
        else if (status === 410) {
            return response.text().then((_responseText) => {
                let result410 = null;
                let resultData410 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result410 = ProblemDetails.fromJS(resultData410);
                return throwException("Gone", status, _responseText, _headers, result410);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    }
}
exports.ProductsClient = ProductsClient;
class AccountInfoResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new AccountInfoResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["domainName"] = this.domainName !== undefined ? this.domainName : null;
        return data;
    }
}
exports.AccountInfoResponse = AccountInfoResponse;
class RegionsResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["names"])) {
                this.names = [];
                for (let item of _data["names"])
                    this.names.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RegionsResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item);
        }
        return data;
    }
}
exports.RegionsResponse = RegionsResponse;
class ProblemDetails {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : null;
            this.title = _data["title"] !== undefined ? _data["title"] : null;
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : null;
            if (_data["extensions"]) {
                this.extensions = {};
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        this.extensions[key] = _data["extensions"][key];
                }
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["status"] = this.status !== undefined ? this.status : null;
        data["detail"] = this.detail !== undefined ? this.detail : null;
        data["instance"] = this.instance !== undefined ? this.instance : null;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    data["extensions"][key] = this.extensions[key] !== undefined ? this.extensions[key] : null;
            }
        }
        return data;
    }
}
exports.ProblemDetails = ProblemDetails;
class IopsRangeResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.min = _data["min"] !== undefined ? _data["min"] : null;
            this.max = _data["max"] !== undefined ? _data["max"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new IopsRangeResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["min"] = this.min !== undefined ? this.min : null;
        data["max"] = this.max !== undefined ? this.max : null;
        return data;
    }
}
exports.IopsRangeResponse = IopsRangeResponse;
class StorageTypeInfoResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.iopsRange = _data["iopsRange"] ? IopsRangeResponse.fromJS(_data["iopsRange"]) : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StorageTypeInfoResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : null;
        data["iopsRange"] = this.iopsRange ? this.iopsRange.toJSON() : null;
        return data;
    }
}
exports.StorageTypeInfoResponse = StorageTypeInfoResponse;
class InstanceTypeParametersResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.virtualCpus = _data["virtualCpus"] !== undefined ? _data["virtualCpus"] : null;
            this.ram = _data["ram"] !== undefined ? _data["ram"] : null;
            if (Array.isArray(_data["availableDiskSizes"])) {
                this.availableDiskSizes = [];
                for (let item of _data["availableDiskSizes"])
                    this.availableDiskSizes.push(item);
            }
            this.numberOfNodes = _data["numberOfNodes"] !== undefined ? _data["numberOfNodes"] : null;
            if (Array.isArray(_data["availableStorageTypes"])) {
                this.availableStorageTypes = [];
                for (let item of _data["availableStorageTypes"])
                    this.availableStorageTypes.push(StorageTypeInfoResponse.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new InstanceTypeParametersResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["virtualCpus"] = this.virtualCpus !== undefined ? this.virtualCpus : null;
        data["ram"] = this.ram !== undefined ? this.ram : null;
        if (Array.isArray(this.availableDiskSizes)) {
            data["availableDiskSizes"] = [];
            for (let item of this.availableDiskSizes)
                data["availableDiskSizes"].push(item);
        }
        data["numberOfNodes"] = this.numberOfNodes !== undefined ? this.numberOfNodes : null;
        if (Array.isArray(this.availableStorageTypes)) {
            data["availableStorageTypes"] = [];
            for (let item of this.availableStorageTypes)
                data["availableStorageTypes"].push(item.toJSON());
        }
        return data;
    }
}
exports.InstanceTypeParametersResponse = InstanceTypeParametersResponse;
class InstanceTypeItemResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.tier = _data["tier"] !== undefined ? _data["tier"] : null;
            this.parameters = _data["parameters"] ? InstanceTypeParametersResponse.fromJS(_data["parameters"]) : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new InstanceTypeItemResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : null;
        data["tier"] = this.tier !== undefined ? this.tier : null;
        data["parameters"] = this.parameters ? this.parameters.toJSON() : null;
        return data;
    }
}
exports.InstanceTypeItemResponse = InstanceTypeItemResponse;
class InstanceTypesResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["instanceTypes"])) {
                this.instanceTypes = [];
                for (let item of _data["instanceTypes"])
                    this.instanceTypes.push(InstanceTypeItemResponse.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new InstanceTypesResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.instanceTypes)) {
            data["instanceTypes"] = [];
            for (let item of this.instanceTypes)
                data["instanceTypes"].push(item.toJSON());
        }
        return data;
    }
}
exports.InstanceTypesResponse = InstanceTypesResponse;
class ReleaseChannelItemResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : null;
            this.ravenVersion = _data["ravenVersion"] !== undefined ? _data["ravenVersion"] : null;
            this.buildType = _data["buildType"] !== undefined ? _data["buildType"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseChannelItemResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : null;
        data["ravenVersion"] = this.ravenVersion !== undefined ? this.ravenVersion : null;
        data["buildType"] = this.buildType !== undefined ? this.buildType : null;
        return data;
    }
}
exports.ReleaseChannelItemResponse = ReleaseChannelItemResponse;
class ReleaseChannelsResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.defaultReleaseChannel = _data["defaultReleaseChannel"] !== undefined ? _data["defaultReleaseChannel"] : null;
            if (Array.isArray(_data["releaseChannels"])) {
                this.releaseChannels = [];
                for (let item of _data["releaseChannels"])
                    this.releaseChannels.push(ReleaseChannelItemResponse.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseChannelsResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["defaultReleaseChannel"] = this.defaultReleaseChannel !== undefined ? this.defaultReleaseChannel : null;
        if (Array.isArray(this.releaseChannels)) {
            data["releaseChannels"] = [];
            for (let item of this.releaseChannels)
                data["releaseChannels"].push(item.toJSON());
        }
        return data;
    }
}
exports.ReleaseChannelsResponse = ReleaseChannelsResponse;
class ProductListItem {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.name = _data["name"] !== undefined ? _data["name"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListItem();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        return data;
    }
}
exports.ProductListItem = ProductListItem;
class ProductListResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [];
                for (let item of _data["items"])
                    this.items.push(ProductListItem.fromJS(item));
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductListResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}
exports.ProductListResponse = ProductListResponse;
class ProductCreateRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.allowedIps = [];
        }
    }
    init(_data) {
        if (_data) {
            this.cloudProvider = _data["cloudProvider"] !== undefined ? _data["cloudProvider"] : null;
            this.instanceTypeName = _data["instanceTypeName"] !== undefined ? _data["instanceTypeName"] : null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : null;
            this.releaseChannel = _data["releaseChannel"] !== undefined ? _data["releaseChannel"] : null;
            this.subdomainName = _data["subdomainName"] !== undefined ? _data["subdomainName"] : null;
            this.tier = _data["tier"] !== undefined ? _data["tier"] : null;
            this.region = _data["region"] !== undefined ? _data["region"] : null;
            this.diskSize = _data["diskSize"] !== undefined ? _data["diskSize"] : null;
            this.iops = _data["iops"] !== undefined ? _data["iops"] : null;
            this.storageTypeName = _data["storageTypeName"] !== undefined ? _data["storageTypeName"] : null;
            if (Array.isArray(_data["allowedIps"])) {
                this.allowedIps = [];
                for (let item of _data["allowedIps"])
                    this.allowedIps.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCreateRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["cloudProvider"] = this.cloudProvider !== undefined ? this.cloudProvider : null;
        data["instanceTypeName"] = this.instanceTypeName !== undefined ? this.instanceTypeName : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["releaseChannel"] = this.releaseChannel !== undefined ? this.releaseChannel : null;
        data["subdomainName"] = this.subdomainName !== undefined ? this.subdomainName : null;
        data["tier"] = this.tier !== undefined ? this.tier : null;
        data["region"] = this.region !== undefined ? this.region : null;
        data["diskSize"] = this.diskSize !== undefined ? this.diskSize : null;
        data["iops"] = this.iops !== undefined ? this.iops : null;
        data["storageTypeName"] = this.storageTypeName !== undefined ? this.storageTypeName : null;
        if (Array.isArray(this.allowedIps)) {
            data["allowedIps"] = [];
            for (let item of this.allowedIps)
                data["allowedIps"].push(item);
        }
        return data;
    }
}
exports.ProductCreateRequest = ProductCreateRequest;
class ProductCreatedResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductCreatedResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : null;
        return data;
    }
}
exports.ProductCreatedResponse = ProductCreatedResponse;
class PaymentPlanResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.contractTerm = _data["contractTerm"] !== undefined ? _data["contractTerm"] : null;
            this.contractValidUntil = _data["contractValidUntil"] ? new Date(_data["contractValidUntil"].toString()) : null;
            this.paymentOption = _data["paymentOption"] !== undefined ? _data["paymentOption"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentPlanResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["contractTerm"] = this.contractTerm !== undefined ? this.contractTerm : null;
        data["contractValidUntil"] = this.contractValidUntil ? this.contractValidUntil.toISOString() : null;
        data["paymentOption"] = this.paymentOption !== undefined ? this.paymentOption : null;
        return data;
    }
}
exports.PaymentPlanResponse = PaymentPlanResponse;
class StorageResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.size = _data["size"] !== undefined ? _data["size"] : null;
            this.iops = _data["iops"] !== undefined ? _data["iops"] : null;
            this.type = _data["type"] !== undefined ? _data["type"] : null;
            if (Array.isArray(_data["availableDiskSizes"])) {
                this.availableDiskSizes = [];
                for (let item of _data["availableDiskSizes"])
                    this.availableDiskSizes.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new StorageResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["size"] = this.size !== undefined ? this.size : null;
        data["iops"] = this.iops !== undefined ? this.iops : null;
        data["type"] = this.type !== undefined ? this.type : null;
        if (Array.isArray(this.availableDiskSizes)) {
            data["availableDiskSizes"] = [];
            for (let item of this.availableDiskSizes)
                data["availableDiskSizes"].push(item);
        }
        return data;
    }
}
exports.StorageResponse = StorageResponse;
class HardwareInfoResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.cpuPriority = _data["cpuPriority"] !== undefined ? _data["cpuPriority"] : null;
            this.cpus = _data["cpus"] !== undefined ? _data["cpus"] : null;
            this.ram = _data["ram"] !== undefined ? _data["ram"] : null;
            this.storage = _data["storage"] ? StorageResponse.fromJS(_data["storage"]) : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new HardwareInfoResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["cpuPriority"] = this.cpuPriority !== undefined ? this.cpuPriority : null;
        data["cpus"] = this.cpus !== undefined ? this.cpus : null;
        data["ram"] = this.ram !== undefined ? this.ram : null;
        data["storage"] = this.storage ? this.storage.toJSON() : null;
        return data;
    }
}
exports.HardwareInfoResponse = HardwareInfoResponse;
class SecurityResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            if (Array.isArray(_data["allowedIps"])) {
                this.allowedIps = [];
                for (let item of _data["allowedIps"])
                    this.allowedIps.push(item);
            }
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new SecurityResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedIps)) {
            data["allowedIps"] = [];
            for (let item of this.allowedIps)
                data["allowedIps"].push(item);
        }
        return data;
    }
}
exports.SecurityResponse = SecurityResponse;
class ProductDetailsResponse {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : null;
            this.subdomainName = _data["subdomainName"] !== undefined ? _data["subdomainName"] : null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : null;
            this.instanceType = _data["instanceType"] !== undefined ? _data["instanceType"] : null;
            this.cloudProvider = _data["cloudProvider"] !== undefined ? _data["cloudProvider"] : null;
            this.status = _data["status"] !== undefined ? _data["status"] : null;
            this.tier = _data["tier"] !== undefined ? _data["tier"] : null;
            this.region = _data["region"] !== undefined ? _data["region"] : null;
            if (Array.isArray(_data["dns"])) {
                this.dns = [];
                for (let item of _data["dns"])
                    this.dns.push(item);
            }
            if (Array.isArray(_data["nodeTags"])) {
                this.nodeTags = [];
                for (let item of _data["nodeTags"])
                    this.nodeTags.push(item);
            }
            this.releaseChannel = _data["releaseChannel"] !== undefined ? _data["releaseChannel"] : null;
            this.paymentPlan = _data["paymentPlan"] ? PaymentPlanResponse.fromJS(_data["paymentPlan"]) : null;
            this.hardwareInfo = _data["hardwareInfo"] ? HardwareInfoResponse.fromJS(_data["hardwareInfo"]) : null;
            this.security = _data["security"] ? SecurityResponse.fromJS(_data["security"]) : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetailsResponse();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : null;
        data["subdomainName"] = this.subdomainName !== undefined ? this.subdomainName : null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : null;
        data["instanceType"] = this.instanceType !== undefined ? this.instanceType : null;
        data["cloudProvider"] = this.cloudProvider !== undefined ? this.cloudProvider : null;
        data["status"] = this.status !== undefined ? this.status : null;
        data["tier"] = this.tier !== undefined ? this.tier : null;
        data["region"] = this.region !== undefined ? this.region : null;
        if (Array.isArray(this.dns)) {
            data["dns"] = [];
            for (let item of this.dns)
                data["dns"].push(item);
        }
        if (Array.isArray(this.nodeTags)) {
            data["nodeTags"] = [];
            for (let item of this.nodeTags)
                data["nodeTags"].push(item);
        }
        data["releaseChannel"] = this.releaseChannel !== undefined ? this.releaseChannel : null;
        data["paymentPlan"] = this.paymentPlan ? this.paymentPlan.toJSON() : null;
        data["hardwareInfo"] = this.hardwareInfo ? this.hardwareInfo.toJSON() : null;
        data["security"] = this.security ? this.security.toJSON() : null;
        return data;
    }
}
exports.ProductDetailsResponse = ProductDetailsResponse;
class ChangeStorageRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : null;
            this.storageType = _data["storageType"] !== undefined ? _data["storageType"] : null;
            this.size = _data["size"] !== undefined ? _data["size"] : null;
            this.iops = _data["iops"] !== undefined ? _data["iops"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeStorageRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : null;
        data["storageType"] = this.storageType !== undefined ? this.storageType : null;
        data["size"] = this.size !== undefined ? this.size : null;
        data["iops"] = this.iops !== undefined ? this.iops : null;
        return data;
    }
}
exports.ChangeStorageRequest = ChangeStorageRequest;
class ChangeInstanceTypeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : null;
            this.instanceType = _data["instanceType"] !== undefined ? _data["instanceType"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeInstanceTypeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : null;
        data["instanceType"] = this.instanceType !== undefined ? this.instanceType : null;
        return data;
    }
}
exports.ChangeInstanceTypeRequest = ChangeInstanceTypeRequest;
class RestartNodeRequest {
    constructor(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    init(_data) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : null;
            this.nodeTag = _data["nodeTag"] !== undefined ? _data["nodeTag"] : null;
        }
    }
    static fromJS(data) {
        data = typeof data === 'object' ? data : {};
        let result = new RestartNodeRequest();
        result.init(data);
        return result;
    }
    toJSON(data) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : null;
        data["nodeTag"] = this.nodeTag !== undefined ? this.nodeTag : null;
        return data;
    }
}
exports.RestartNodeRequest = RestartNodeRequest;
class ApiException extends Error {
    constructor(message, status, response, headers, result) {
        super();
        this.isApiException = true;
        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }
    static isApiException(obj) {
        return obj.isApiException === true;
    }
}
exports.ApiException = ApiException;
function throwException(message, status, response, headers, result) {
    throw new ApiException(message, status, response, headers, result);
}
