import { RequestInit, Response, RequestInfo, Blob } from "node-fetch";
/**
 * Configuration interface needed in base class.
 * The config is provided to the API client at initialization time.
 * API clients inherit from #AuthorizedApiBase and provide the config.
 */
export interface IApiClientAuthConfig {
    /**
     * Returns a valid value for the Authorization header.
     * Used to dynamically inject the current auth header.
     */
    apiKey: string;
}
/**
 * The base class for all API clients.
 * Injects Authorization header into the requests, see #transformOptions.
 */
export declare abstract class AuthorizedApiBase {
    private readonly config;
    protected constructor(config: IApiClientAuthConfig);
    protected transformOptions(options: RequestInit): Promise<RequestInit>;
    protected transformResult(_url: string, response: Response, processor: (response: Response) => Promise<any>): Promise<any>;
}
export declare class AccountClient extends AuthorizedApiBase {
    private http;
    private baseUrl;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined;
    constructor(configuration: IApiClientAuthConfig, baseUrl?: string, http?: {
        fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
    });
    /**
     * Gets account info
     * @return Account info
     */
    getInfo(): Promise<AccountInfoResponse>;
    protected processGetInfo(response: Response): Promise<AccountInfoResponse>;
}
export declare class MetadataClient extends AuthorizedApiBase {
    private http;
    private baseUrl;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined;
    constructor(configuration: IApiClientAuthConfig, baseUrl?: string, http?: {
        fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
    });
    /**
     * Gets regions available for given cloud provider
     * @param cloudProvider Cloud provider
     * @return List of regions available for given cloud provider
     */
    getRegions(cloudProvider: CloudProvider): Promise<RegionsResponse>;
    protected processGetRegions(response: Response): Promise<RegionsResponse>;
    /**
     * Gets instance types available for given cloud provider and region
     * @param cloudProvider Cloud provider
     * @param region Region
     * @return List of instance types available for given cloud provider and region
     */
    getInstanceTypes(cloudProvider: CloudProvider, region: string | null): Promise<InstanceTypesResponse>;
    protected processGetInstanceTypes(response: Response): Promise<InstanceTypesResponse>;
    /**
     * Gets product release channels
     * @return List of product release channels
     */
    getReleaseChannels(): Promise<ReleaseChannelsResponse>;
    protected processGetReleaseChannels(response: Response): Promise<ReleaseChannelsResponse>;
}
export declare class ProductsClient extends AuthorizedApiBase {
    private http;
    private baseUrl;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined;
    constructor(configuration: IApiClientAuthConfig, baseUrl?: string, http?: {
        fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
    });
    /**
     * Gets product list
     * @return Products list
     */
    list(): Promise<ProductListResponse>;
    protected processList(response: Response): Promise<ProductListResponse>;
    /**
     * Creates product
     * @param body (optional)
     * @return Created Product Info
     */
    create(body: ProductCreateRequest | undefined): Promise<ProductCreatedResponse>;
    protected processCreate(response: Response): Promise<ProductCreatedResponse>;
    /**
     * Gets product details
     * @return Product details
     */
    getDetails(id: string): Promise<ProductDetailsResponse>;
    protected processGetDetails(response: Response): Promise<ProductDetailsResponse>;
    /**
     * Gets product client certificate
     * @return Product client certificate
     */
    getCertificate(id: string): Promise<FileResponse>;
    protected processGetCertificate(response: Response): Promise<FileResponse>;
    /**
     * Changes product storage
     * @param body (optional)
     * @return Success
     */
    changeStorage(body: ChangeStorageRequest | undefined): Promise<void>;
    protected processChangeStorage(response: Response): Promise<void>;
    /**
     * Changes product instance type
     * @param body (optional)
     * @return Success
     */
    changeInstanceType(body: ChangeInstanceTypeRequest | undefined): Promise<void>;
    protected processChangeInstanceType(response: Response): Promise<void>;
    /**
     * Restart node
     * @param body (optional)
     * @return Success
     */
    restartNode(body: RestartNodeRequest | undefined): Promise<void>;
    protected processRestartNode(response: Response): Promise<void>;
    /**
     * Terminate product
     * @return Success
     */
    terminate(id: string): Promise<void>;
    protected processTerminate(response: Response): Promise<void>;
}
export declare class AccountInfoResponse implements IAccountInfoResponse {
    domainName?: string | null;
    constructor(data?: IAccountInfoResponse);
    init(_data?: any): void;
    static fromJS(data: any): AccountInfoResponse;
    toJSON(data?: any): any;
}
export interface IAccountInfoResponse {
    domainName?: string | null;
}
export declare type CloudProvider = "Aws" | "Azure" | "Gcp";
export declare class RegionsResponse implements IRegionsResponse {
    names?: string[] | null;
    constructor(data?: IRegionsResponse);
    init(_data?: any): void;
    static fromJS(data: any): RegionsResponse;
    toJSON(data?: any): any;
}
export interface IRegionsResponse {
    names?: string[] | null;
}
export declare class ProblemDetails implements IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    readonly extensions?: {
        [key: string]: any;
    } | null;
    constructor(data?: IProblemDetails);
    init(_data?: any): void;
    static fromJS(data: any): ProblemDetails;
    toJSON(data?: any): any;
}
export interface IProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    extensions?: {
        [key: string]: any;
    } | null;
}
export declare type ProductTier = "Free" | "Development" | "Production";
export declare type StorageType = "SsdStandard" | "SsdPremium";
export declare class IopsRangeResponse implements IIopsRangeResponse {
    min?: number;
    max?: number;
    constructor(data?: IIopsRangeResponse);
    init(_data?: any): void;
    static fromJS(data: any): IopsRangeResponse;
    toJSON(data?: any): any;
}
export interface IIopsRangeResponse {
    min?: number;
    max?: number;
}
export declare class StorageTypeInfoResponse implements IStorageTypeInfoResponse {
    name?: StorageType;
    iopsRange?: IopsRangeResponse;
    constructor(data?: IStorageTypeInfoResponse);
    init(_data?: any): void;
    static fromJS(data: any): StorageTypeInfoResponse;
    toJSON(data?: any): any;
}
export interface IStorageTypeInfoResponse {
    name?: StorageType;
    iopsRange?: IopsRangeResponse;
}
export declare class InstanceTypeParametersResponse implements IInstanceTypeParametersResponse {
    virtualCpus?: number;
    ram?: number;
    availableDiskSizes?: number[] | null;
    numberOfNodes?: number;
    availableStorageTypes?: StorageTypeInfoResponse[] | null;
    constructor(data?: IInstanceTypeParametersResponse);
    init(_data?: any): void;
    static fromJS(data: any): InstanceTypeParametersResponse;
    toJSON(data?: any): any;
}
export interface IInstanceTypeParametersResponse {
    virtualCpus?: number;
    ram?: number;
    availableDiskSizes?: number[] | null;
    numberOfNodes?: number;
    availableStorageTypes?: StorageTypeInfoResponse[] | null;
}
export declare class InstanceTypeItemResponse implements IInstanceTypeItemResponse {
    name?: string | null;
    tier?: ProductTier;
    parameters?: InstanceTypeParametersResponse;
    constructor(data?: IInstanceTypeItemResponse);
    init(_data?: any): void;
    static fromJS(data: any): InstanceTypeItemResponse;
    toJSON(data?: any): any;
}
export interface IInstanceTypeItemResponse {
    name?: string | null;
    tier?: ProductTier;
    parameters?: InstanceTypeParametersResponse;
}
export declare class InstanceTypesResponse implements IInstanceTypesResponse {
    instanceTypes?: InstanceTypeItemResponse[] | null;
    constructor(data?: IInstanceTypesResponse);
    init(_data?: any): void;
    static fromJS(data: any): InstanceTypesResponse;
    toJSON(data?: any): any;
}
export interface IInstanceTypesResponse {
    instanceTypes?: InstanceTypeItemResponse[] | null;
}
export declare type ReleaseChannelBuildType = "Stable" | "Development";
export declare class ReleaseChannelItemResponse implements IReleaseChannelItemResponse {
    name?: string | null;
    ravenVersion?: string | null;
    buildType?: ReleaseChannelBuildType;
    constructor(data?: IReleaseChannelItemResponse);
    init(_data?: any): void;
    static fromJS(data: any): ReleaseChannelItemResponse;
    toJSON(data?: any): any;
}
export interface IReleaseChannelItemResponse {
    name?: string | null;
    ravenVersion?: string | null;
    buildType?: ReleaseChannelBuildType;
}
export declare class ReleaseChannelsResponse implements IReleaseChannelsResponse {
    defaultReleaseChannel?: string | null;
    releaseChannels?: ReleaseChannelItemResponse[] | null;
    constructor(data?: IReleaseChannelsResponse);
    init(_data?: any): void;
    static fromJS(data: any): ReleaseChannelsResponse;
    toJSON(data?: any): any;
}
export interface IReleaseChannelsResponse {
    defaultReleaseChannel?: string | null;
    releaseChannels?: ReleaseChannelItemResponse[] | null;
}
export declare class ProductListItem implements IProductListItem {
    id?: string | null;
    name?: string | null;
    constructor(data?: IProductListItem);
    init(_data?: any): void;
    static fromJS(data: any): ProductListItem;
    toJSON(data?: any): any;
}
export interface IProductListItem {
    id?: string | null;
    name?: string | null;
}
export declare class ProductListResponse implements IProductListResponse {
    items?: ProductListItem[] | null;
    constructor(data?: IProductListResponse);
    init(_data?: any): void;
    static fromJS(data: any): ProductListResponse;
    toJSON(data?: any): any;
}
export interface IProductListResponse {
    items?: ProductListItem[] | null;
}
export declare class ProductCreateRequest implements IProductCreateRequest {
    cloudProvider: CloudProvider;
    instanceTypeName: string;
    displayName: string;
    releaseChannel: string;
    subdomainName?: string | null;
    tier: ProductTier;
    region: string;
    diskSize: number;
    iops?: number | null;
    storageTypeName: StorageType;
    allowedIps: string[];
    constructor(data?: IProductCreateRequest);
    init(_data?: any): void;
    static fromJS(data: any): ProductCreateRequest;
    toJSON(data?: any): any;
}
export interface IProductCreateRequest {
    cloudProvider: CloudProvider;
    instanceTypeName: string;
    displayName: string;
    releaseChannel: string;
    subdomainName?: string | null;
    tier: ProductTier;
    region: string;
    diskSize: number;
    iops?: number | null;
    storageTypeName: StorageType;
    allowedIps: string[];
}
export declare class ProductCreatedResponse implements IProductCreatedResponse {
    productId?: string | null;
    constructor(data?: IProductCreatedResponse);
    init(_data?: any): void;
    static fromJS(data: any): ProductCreatedResponse;
    toJSON(data?: any): any;
}
export interface IProductCreatedResponse {
    productId?: string | null;
}
export declare type ProductStatus = "Creating" | "Active" | "DeployingChanges" | "Terminating" | "Terminated" | "Error" | "AwaitingPayment";
export declare type ContractTerm = "OnDemand" | "Yearly";
export declare type PaymentOption = "Monthly" | "YearlyUpfront";
export declare class PaymentPlanResponse implements IPaymentPlanResponse {
    contractTerm?: ContractTerm;
    contractValidUntil?: Date | null;
    paymentOption?: PaymentOption;
    constructor(data?: IPaymentPlanResponse);
    init(_data?: any): void;
    static fromJS(data: any): PaymentPlanResponse;
    toJSON(data?: any): any;
}
export interface IPaymentPlanResponse {
    contractTerm?: ContractTerm;
    contractValidUntil?: Date | null;
    paymentOption?: PaymentOption;
}
export declare type CpuPriority = "Shared" | "Basic" | "Standard" | "Performance";
export declare class StorageResponse implements IStorageResponse {
    size?: number;
    iops?: number | null;
    type?: StorageType;
    availableDiskSizes?: number[] | null;
    constructor(data?: IStorageResponse);
    init(_data?: any): void;
    static fromJS(data: any): StorageResponse;
    toJSON(data?: any): any;
}
export interface IStorageResponse {
    size?: number;
    iops?: number | null;
    type?: StorageType;
    availableDiskSizes?: number[] | null;
}
export declare class HardwareInfoResponse implements IHardwareInfoResponse {
    cpuPriority?: CpuPriority;
    cpus?: number;
    ram?: number;
    storage?: StorageResponse;
    constructor(data?: IHardwareInfoResponse);
    init(_data?: any): void;
    static fromJS(data: any): HardwareInfoResponse;
    toJSON(data?: any): any;
}
export interface IHardwareInfoResponse {
    cpuPriority?: CpuPriority;
    cpus?: number;
    ram?: number;
    storage?: StorageResponse;
}
export declare class SecurityResponse implements ISecurityResponse {
    allowedIps?: string[] | null;
    constructor(data?: ISecurityResponse);
    init(_data?: any): void;
    static fromJS(data: any): SecurityResponse;
    toJSON(data?: any): any;
}
export interface ISecurityResponse {
    allowedIps?: string[] | null;
}
export declare class ProductDetailsResponse implements IProductDetailsResponse {
    id?: string | null;
    subdomainName?: string | null;
    displayName?: string | null;
    instanceType?: string | null;
    cloudProvider?: CloudProvider;
    status?: ProductStatus;
    tier?: ProductTier;
    region?: string | null;
    dns?: string[] | null;
    nodeTags?: string[] | null;
    releaseChannel?: string | null;
    paymentPlan?: PaymentPlanResponse;
    hardwareInfo?: HardwareInfoResponse;
    security?: SecurityResponse;
    constructor(data?: IProductDetailsResponse);
    init(_data?: any): void;
    static fromJS(data: any): ProductDetailsResponse;
    toJSON(data?: any): any;
}
export interface IProductDetailsResponse {
    id?: string | null;
    subdomainName?: string | null;
    displayName?: string | null;
    instanceType?: string | null;
    cloudProvider?: CloudProvider;
    status?: ProductStatus;
    tier?: ProductTier;
    region?: string | null;
    dns?: string[] | null;
    nodeTags?: string[] | null;
    releaseChannel?: string | null;
    paymentPlan?: PaymentPlanResponse;
    hardwareInfo?: HardwareInfoResponse;
    security?: SecurityResponse;
}
export declare class ChangeStorageRequest implements IChangeStorageRequest {
    productId: string;
    storageType: StorageType;
    size: number;
    iops?: number | null;
    constructor(data?: IChangeStorageRequest);
    init(_data?: any): void;
    static fromJS(data: any): ChangeStorageRequest;
    toJSON(data?: any): any;
}
export interface IChangeStorageRequest {
    productId: string;
    storageType: StorageType;
    size: number;
    iops?: number | null;
}
export declare class ChangeInstanceTypeRequest implements IChangeInstanceTypeRequest {
    productId: string;
    instanceType: string;
    constructor(data?: IChangeInstanceTypeRequest);
    init(_data?: any): void;
    static fromJS(data: any): ChangeInstanceTypeRequest;
    toJSON(data?: any): any;
}
export interface IChangeInstanceTypeRequest {
    productId: string;
    instanceType: string;
}
export declare class RestartNodeRequest implements IRestartNodeRequest {
    productId: string;
    nodeTag: string;
    constructor(data?: IRestartNodeRequest);
    init(_data?: any): void;
    static fromJS(data: any): RestartNodeRequest;
    toJSON(data?: any): any;
}
export interface IRestartNodeRequest {
    productId: string;
    nodeTag: string;
}
export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: {
        [name: string]: any;
    };
}
export declare class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: {
        [key: string]: any;
    };
    result: any;
    constructor(message: string, status: number, response: string, headers: {
        [key: string]: any;
    }, result: any);
    protected isApiException: boolean;
    static isApiException(obj: any): obj is ApiException;
}
